import csv
import json
import os
import time
from scr.updater import get_wc_api


def load_settings():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ settings.json
    """
    config_path = os.path.join(os.path.dirname(__file__), "..", "config", "settings.json")
    with open(config_path, "r", encoding="utf-8") as f:
        return json.load(f)


def export_products():
    """
    –ï–∫—Å–ø–æ—Ä—Ç —É—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É CSV –ø–∞—á–∫–∞–º–∏ –ø–æ 100.
    """

    # –®–ª—è—Ö –¥–æ CSV
    csv_path = os.path.join(os.path.dirname(__file__), "..", "csv", "input", "zalishki.csv")

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
    headers = [
        "ID", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞", "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ", "–ó–∞–ø–∞—Å–∏", "–ó–≤–∏—á–∞–π–Ω–∞ —Ü—ñ–Ω–∞", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        "–ú–µ—Ç–∞: shtrih_cod", "–ú–µ—Ç–∞: postachalnyk", "–ú–µ—Ç–∞: artykul_lutsk", "–ú–µ—Ç–∞: url_lutsk",
        "–ú–µ—Ç–∞: artykul_blizklub", "–ú–µ—Ç–∞: url_blizklub",
        "–ú–µ—Ç–∞: artykul_sexopt", "–ú–µ—Ç–∞: url_sexopt",
        "–ú–µ—Ç–∞: artykul_biorytm", "–ú–µ—Ç–∞: url_biorytm",
        "–ú–µ—Ç–∞: artykul_berdiansk"
    ]

    wcapi = get_wc_api()

    start_time = time.time()

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤
    response = wcapi.get("products", params={"per_page": 1})
    if response.status_code != 200:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {response.status_code} –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–æ–≤–∞—Ä—ñ–≤")
        return

    total_products = int(response.headers.get("X-WP-Total", 0))
    print(f"üîé –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {total_products}")

    exported_count = 0

    with open(csv_path, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(headers)

        page = 1
        while exported_count < total_products:
            response = wcapi.get(
                "products",
                params={
                    "per_page": 100,
                    "page": page,
                    "_fields": "id,sku,name,status,stock_quantity,regular_price,categories,meta_data"
                }
            )

            if response.status_code != 200:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {response.status_code} –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}")
                break

            products = response.json()
            if not products:
                break

            for product in products:
                product["meta_data_dict"] = {m["key"]: m["value"] for m in product.get("meta_data", [])}

                row = [
                    product.get("id"),
                    product.get("sku"),
                    product.get("name"),
                    "yes" if product.get("status") == "publish" else "no",
                    product.get("stock_quantity"),
                    product.get("regular_price"),
                    ", ".join([cat["name"] for cat in product.get("categories", [])]),
                    product["meta_data_dict"].get("shtrih_cod", ""),
                    product["meta_data_dict"].get("postachalnyk", ""),
                    product["meta_data_dict"].get("artykul_lutsk", ""),
                    product["meta_data_dict"].get("url_lutsk", ""),
                    product["meta_data_dict"].get("artykul_blizklub", ""),
                    product["meta_data_dict"].get("url_blizklub", ""),
                    product["meta_data_dict"].get("artykul_sexopt", ""),
                    product["meta_data_dict"].get("url_sexopt", ""),
                    product["meta_data_dict"].get("artykul_biorytm", ""),
                    product["meta_data_dict"].get("url_biorytm", ""),
                    product["meta_data_dict"].get("artykul_berdiansk", "")
                ]
                writer.writerow(row)

                exported_count += 1
                if exported_count % 100 == 0 or exported_count == total_products:
                    elapsed = int(time.time() - start_time)
                    print(f"‚úÖ –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {exported_count} –∑ {total_products} ({elapsed} —Å–µ–∫)")

            page += 1
            time.sleep(1)  # ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏

    print("üéâ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")