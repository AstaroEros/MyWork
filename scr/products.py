import csv
import json
import os
import time
from scr.updater import get_wc_api
from datetime import datetime

def load_settings():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ settings.json
    """
    config_path = os.path.join(os.path.dirname(__file__), "..", "config", "settings.json")
    try:
        with open(config_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {config_path}")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π: {config_path}")
        return None

def setup_log_file():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å logs.log, –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î –π–æ–≥–æ, —è–∫—â–æ —ñ—Å–Ω—É—î,
    —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É.
    """
    log_dir = os.path.join(os.path.dirname(__file__), "..", "logs")
    os.makedirs(log_dir, exist_ok=True)
    
    current_log_path = os.path.join(log_dir, "logs.log")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª logs.log
    if os.path.exists(current_log_path):
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        new_log_path = os.path.join(log_dir, f"logs_{timestamp}.log")
        try:
            os.rename(current_log_path, new_log_path)
            print(f"‚úÖ –°—Ç–∞—Ä–∏–π –ª–æ–≥-—Ñ–∞–π–ª –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞ {os.path.basename(new_log_path)}")
        except OSError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—ñ –ª–æ–≥-—Ñ–∞–π–ª—É: {e}")
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ä–∏–π —à–ª—è—Ö
            return current_log_path

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —à–ª—è—Ö, —è–∫–∏–π –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –¥–ª—è –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤
    return current_log_path

def log_message(message, log_file_path):
    """
    –ó–∞–ø–∏—Å—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ª–æ–≥-—Ñ–∞–π–ª.
    """
    with open(log_file_path, "a", encoding="utf-8") as log_file:
        log_file.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

def export_products():
    """
    –ï–∫—Å–ø–æ—Ä—Ç —É—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É CSV –ø–∞—á–∫–∞–º–∏ –ø–æ 100.
    """
    settings = load_settings()
    if not settings:
        return
        
    log_file_path = setup_log_file()
    
    csv_path = os.path.join(os.path.dirname(__file__), "..", "csv", "input", "zalishki.csv")
    
    headers = [
        "ID", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞", "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ", "–ó–∞–ø–∞—Å–∏", "–ó–≤–∏—á–∞–π–Ω–∞ —Ü—ñ–Ω–∞", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        "–ú–µ—Ç–∞: shtrih_cod", "–ú–µ—Ç–∞: postachalnyk", "–ú–µ—Ç–∞: artykul_lutsk", "–ú–µ—Ç–∞: url_lutsk",
        "–ú–µ—Ç–∞: artykul_blizklub", "–ú–µ—Ç–∞: url_blizklub",
        "–ú–µ—Ç–∞: artykul_sexopt", "–ú–µ—Ç–∞: url_sexopt",
        "–ú–µ—Ç–∞: artykul_biorytm", "–ú–µ—Ç–∞: url_biorytm",
        "–ú–µ—Ç–∞: artykul_berdiansk"
    ]

    wcapi = get_wc_api()
    start_time = time.time()
    total_products = 0
    exported_count = 0
    errors = []

    log_message("üöÄ –ü–æ—á–∞—Ç–æ–∫ –µ–∫—Å–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤.", log_file_path)

    try:
        response = wcapi.get("products", params={"per_page": 1})
        if response.status_code != 200:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ {response.status_code} –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–æ–≤–∞—Ä—ñ–≤: {response.text}"
            print(f"‚ùå {error_msg}")
            log_message(f"‚ùå {error_msg}", log_file_path)
            errors.append(error_msg)
            return

        total_products = int(response.headers.get("X-WP-Total", 0))
        print(f"üîé –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {total_products}")
        log_message(f"üîé –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {total_products}", log_file_path)

        with open(csv_path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(headers)

            page = 1
            while exported_count < total_products:
                response = wcapi.get(
                    "products",
                    params={
                        "per_page": 100,
                        "page": page,
                        "_fields": "id,sku,name,status,stock_quantity,regular_price,categories,meta_data"
                    }
                )

                if response.status_code != 200:
                    error_msg = f"–ü–æ–º–∏–ª–∫–∞ {response.status_code} –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}: {response.text}"
                    print(f"‚ùå {error_msg}")
                    log_message(f"‚ùå {error_msg}", log_file_path)
                    errors.append(error_msg)
                    break

                products = response.json()
                if not products:
                    break

                for product in products:
                    product["meta_data_dict"] = {m["key"]: m["value"] for m in product.get("meta_data", [])}
                    row = [
                        product.get("id"),
                        product.get("sku"),
                        product.get("name"),
                        "yes" if product.get("status") == "publish" else "no",
                        product.get("stock_quantity"),
                        product.get("regular_price"),
                        ", ".join([cat["name"] for cat in product.get("categories", [])]),
                        product["meta_data_dict"].get("shtrih_cod", ""),
                        product["meta_data_dict"].get("postachalnyk", ""),
                        product["meta_data_dict"].get("artykul_lutsk", ""),
                        product["meta_data_dict"].get("url_lutsk", ""),
                        product["meta_data_dict"].get("artykul_blizklub", ""),
                        product["meta_data_dict"].get("url_blizklub", ""),
                        product["meta_data_dict"].get("artykul_sexopt", ""),
                        product["meta_data_dict"].get("url_sexopt", ""),
                        product["meta_data_dict"].get("artykul_biorytm", ""),
                        product["meta_data_dict"].get("url_biorytm", ""),
                        product["meta_data_dict"].get("artykul_berdiansk", "")
                    ]
                    writer.writerow(row)
                    exported_count += 1
                
                if exported_count % 100 == 0 or exported_count == total_products:
                    elapsed = int(time.time() - start_time)
                    status_message = f"‚úÖ –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {exported_count} –∑ {total_products} ({elapsed} —Å–µ–∫)"
                    print(status_message)
                    log_message(status_message, log_file_path)

                page += 1
                time.sleep(1)

    except Exception as e:
        error_msg = f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –µ–∫—Å–ø–æ—Ä—Ç—É: {e}"
        print(f"‚ùå {error_msg}")
        log_message(f"‚ùå {error_msg}", log_file_path)
        errors.append(error_msg)
    finally:
        end_time = time.time()
        elapsed_time = int(end_time - start_time)
        
        print(f"üéâ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {exported_count} –∑ {total_products} —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ {elapsed_time} —Å–µ–∫.")
        if errors:
            print(f"‚ö†Ô∏è –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ {len(errors)} –ø–æ–º–∏–ª–∫–∞–º–∏. –î–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥-—Ñ–∞–π–ª—ñ.")
        
        log_message(f"--- –ü—ñ–¥—Å—É–º–æ–∫ –µ–∫—Å–ø–æ—Ä—Ç—É ---", log_file_path)
        log_message(f"–°—Ç–∞—Ç—É—Å: {'–£—Å–ø—ñ—à–Ω–æ' if not errors else '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏'}", log_file_path)
        log_message(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {exported_count} –∑ {total_products}", log_file_path)
        log_message(f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {elapsed_time} —Å–µ–∫.", log_file_path)
        if errors:
            log_message(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫: {len(errors)}", log_file_path)
            log_message("–ü–µ—Ä–µ–ª—ñ–∫ –ø–æ–º–∏–ª–æ–∫:", log_file_path)
            for err in errors:
                log_message(f"- {err}", log_file_path)